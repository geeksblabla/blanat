#include <sys/mman.h>
#include <pthread.h>
#include <stdbool.h>
#include <unistd.h>
#include <string.h>
#include <fcntl.h>
#include <stdio.h>
#include <err.h>
#include <stdlib.h>
#include <math.h>
#include <sys/stat.h>


///////////// DEFINES ////////////////////////
# define PAGE_SIZE 4096
# define THREADS 6
# define NL_SAMPLE 45
// # define DEBUG 
// # define BUILD

/////////////   .bss  ////////////////////////
// offsets where the newline hits in every page
int offpages[100000000] ;
int total_offset_pages = 0;
int pages_idx = 0;
void *pages[THREADS];
int  fds[THREADS];
char *filename;

// case of 1m input.txt this should allocate 5767 page, which is kinda fucked
// but allows the threads to read
void newlines_offset(){
	int fd = open(filename, O_RDONLY);
	struct stat filex;
	int readstatus = 1;
	int coffset = PAGE_SIZE;
	char buffer[NL_SAMPLE + 1];
	int pagesbuffer = 1;

	while (readstatus != 0 && lseek(fd, coffset - NL_SAMPLE, SEEK_SET) > 0){
		readstatus = read(fd, buffer, NL_SAMPLE);
		char* newline = strrchr(buffer, '\n');
		offpages[pagesbuffer] =  coffset - (NL_SAMPLE - labs(newline - buffer));
		coffset = offpages[pagesbuffer++] + PAGE_SIZE;
		total_offset_pages++;
	}
	#ifdef DEBUG
	while (offpages[++readstatus] != 0){
		printf("%d, ", offpages[readstatus]);
	}
	#endif
	close(fd);
}

void init_pages(){
	int i = -1;
	while (++i < THREADS){
		pages[i] = mmap(0, PAGE_SIZE + 1, PROT_WRITE | PROT_READ, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0 );
	}
	// initing fds
	i = -1;
	while (++i < THREADS){
		fds[i] = open(filename, O_RDONLY);
	}
}

void *read_chunk(void *id){
	int iid = (int) id;
	int i = iid;
	// int readsperthread = ceil(total_offset_pages / THREADS);
	// int rpt = -1;		// read per thread
#ifdef DEBUG
	puts("init threads");
#endif
	while (offpages[i + 1] != 0) {
		lseek(fds[iid], offpages[i], SEEK_SET);
#ifdef DEBUG
		printf("thread [%d] reading from fd[%d] page[%d] offset %d total of %d bytes\n",
			iid , fds[iid], i, offpages[i], offpages[i + 1] - offpages[i]);
#endif
		
		int zbyte = read(fds[iid], pages[iid], offpages[i + 1] - offpages[i]);
		if (zbyte > 0)
			((char *)pages[iid])[zbyte] = '\0';
		i += THREADS ;
	}
	return (NULL);
}


int main(int argc, char **argv){
	long long int i = -1;
	pthread_t threadsid[THREADS];

	filename = argv[1];
	if (argc < 2)
		filename = "input.txt";
	#ifdef BUILD
		errx(fd == -1 , "%s[%d] not found", filename, fd);
	#endif
	// caching the newline pages offsets
	newlines_offset();
	// initing pages
	init_pages();
	// offsets are loaded, now we load, threads
	while (++i < THREADS){
		pthread_create(&threadsid[i], NULL, read_chunk, (void *) i);
		pthread_join(threadsid[i], NULL);
	}
	i = -1;
	while (++i < THREADS){
		puts(pages[i] + strlen(pages[i]) - 200);
		puts("---------------------------");
	}
	i = -1;
	while (++i < THREADS){
		close(fds[i]);
	}
	return (0);

}
